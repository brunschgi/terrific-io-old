<?php

namespace Terrific\Composition\Entity;

use Doctrine\ORM\EntityRepository;
use Terrific\Composition\Entity\Snippet;
use Terrific\Composition\Entity\Module;

/**
 * ModuleRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ModuleRepository extends EntityRepository
{
    public function create($user, $module) {
        $em = $this->getEntityManager();

        // check whether the user is authorized to create a new module for the given project
        $projectRepo = $this->getEntityManager()->getRepository('TerrificComposition:Project');
        $project = $projectRepo->findOneByUserAndId($user, $module->getProject());

        // create some default values
        $module->setTitle('My new experiment');
        $module->setDescription('Psstâ€¦ please give away a secret about your experiment');
        $module->setProject($project);

        $markup = $module->getMarkup();
        if(!$markup) {
            $markup = new Snippet();
            $markup->setMode('text/html');
            $markup->setCode('<div class="mod mod-draft">Test</div>');
            $module->setMarkup($markup);
        }

        $style = $module->getStyle();
        if(!$style) {
            $style = new Snippet();
            $style->setMode('text/css');
            $style->setCode('.mod-draft { color: navy }');
            $module->setStyle($style);
        }

        $script = $module->getScript();
        if(!$script) {
            $script = new Snippet();
            $script->setMode('text/javascript');
            $script->setCode('');
            $module->setScript($script);
        }

        // persist it
        $em->persist($markup);
        $em->persist($style);
        $em->persist($script);

        $em->persist($module);
        $em->flush();

        return $module;
    }

    public function update($user, $id, $tmpModule) {
        $em = $this->getEntityManager();
        $module = $this->findOneByUserAndId($user, $id);

        $module->setTitle($tmpModule->getTitle());
        $module->setDescription($tmpModule->getDescription());

        $tmpMarkup = $tmpModule->getMarkup();
        $markup = $module->getMarkup();
        $markup->setCode($tmpMarkup->getCode());
        $markup->setMode($tmpMarkup->getMode());
        $markup->setCompiled($tmpMarkup->getCode());
        $module->setMarkup($markup);

        $tmpStyle = $tmpModule->getStyle();
        $style = $module->getStyle();
        $style->setCode($tmpStyle->getCode());
        $style->setMode($tmpStyle->getMode());

        if($style->getMode() !== 'text/css') {
            // precompile styles
            $style->setCompiled('');
        }
        else {
            $style->setCompiled($tmpStyle->getCode());
        }

        $module->setStyle($style);

        $tmpScript= $tmpModule->getScript();
        $script = $module->getScript();
        $script->setCode($tmpScript->getCode());
        $script->setMode($tmpScript->getMode());
        $script->setCompiled($tmpScript->getCode());
        $module->setScript($script);

        $em->flush();

        return $module;
    }

    public function delete($user, $id) {
        $em = $this->getEntityManager();

        $module = $this->findOneByUserAndId($user, $id);

        $em->remove($module);
        $em->flush();
    }

    public function findPage($type, $page) {
        $em = $this->getEntityManager();

        $query = $em->createQuery("SELECT m FROM TerrificComposition:Module m")
            ->setFirstResult(($page - 1) * 10)
            ->setMaxResults(10);

        return $query->getResult();
    }

    public function findOneByUserAndId($user, $id) {
        $em = $this->getEntityManager();

        $query = $em->createQuery('
            SELECT m
            FROM TerrificComposition:Module m
                JOIN m.project p
            WHERE m.id = :id
                AND p.user = :user')
            ->setParameter('id', $id)
            ->setParameter('user', $user)
            ->setMaxResults(1);

        $result = $query->getResult();
        $module = $result[0];

        if(!$module) {
            throw new \Exception('the module with the id "'.$id.'" could not be found');
        }

        return $module;
    }
}